name: Create New Issues from Auto-Generated Issue

on:
  issues:
    types: [opened, edited]

jobs:
  create-new-issues:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.body, 'NEW_ISSUE_REQUESTS')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Extract and Create Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = context.payload.issue.body;
            
            // Helper function to get the first column ID of a project
            async function getProjectColumnId(projectNumber) {
              try {
                // Get project details
                const project = await github.rest.projects.get({
                  project_id: projectNumber
                });
                
                // Get project columns
                const columns = await github.rest.projects.listColumns({
                  project_id: projectNumber
                });
                
                if (columns.data.length === 0) {
                  throw new Error(`No columns found in project ${projectNumber}`);
                }
                
                // Return the first column ID (you can modify this logic if needed)
                return columns.data[0].id;
              } catch (error) {
                throw new Error(`Failed to get project ${projectNumber} details: ${error.message}`);
              }
            }
            
            // Extract reporter from the issue body
            const reporterMatch = issueBody.match(/\*\*Reporter:\*\* @(\w+)/);
            const reporter = reporterMatch ? reporterMatch[1] : null;
            
            // Extract project number from the issue body
            const projectMatch = issueBody.match(/\*\*Project:\*\* (\d+)/);
            const projectNumber = projectMatch ? parseInt(projectMatch[1]) : null;
            
            // Extract JSON data from the HTML comment
            const jsonMatch = issueBody.match(/<!-- NEW_ISSUE_REQUESTS\s*\n([\s\S]*?)\n-->/);
            
            if (!jsonMatch) {
              console.log('No NEW_ISSUE_REQUESTS found in the issue body');
              return;
            }
            
            let issueRequests;
            try {
              issueRequests = JSON.parse(jsonMatch[1]);
            } catch (error) {
              console.error('Failed to parse JSON:', error);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **Error:** Failed to parse issue requests JSON: ${error.message}`
              });
              return;
            }
            
            if (!Array.isArray(issueRequests)) {
              console.error('Issue requests is not an array');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **Error:** Issue requests must be an array`
              });
              return;
            }
            
            const createdIssues = [];
            const errors = [];
            
            for (const [index, request] of issueRequests.entries()) {
              try {
                if (!request.title || !request.body) {
                  errors.push(`Issue ${index + 1}: Missing title or body`);
                  continue;
                }
                
                // Create the new issue
                const newIssue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: request.title,
                  body: request.body,
                  assignees: reporter ? [reporter] : []
                });
                
                createdIssues.push({
                  number: newIssue.data.number,
                  title: request.title,
                  url: newIssue.data.html_url
                });
                
                console.log(`Created issue #${newIssue.data.number}: ${request.title}`);
                
                // Add issue to project if project number is specified
                if (projectNumber) {
                  try {
                    await github.rest.projects.createCard({
                      column_id: await getProjectColumnId(projectNumber),
                      content_id: newIssue.data.id,
                      content_type: 'Issue'
                    });
                    console.log(`Added issue #${newIssue.data.number} to project ${projectNumber}`);
                  } catch (projectError) {
                    console.error(`Failed to add issue #${newIssue.data.number} to project ${projectNumber}:`, projectError);
                    errors.push(`Issue ${index + 1}: Created but failed to add to project ${projectNumber}`);
                  }
                }
                
              } catch (error) {
                console.error(`Failed to create issue ${index + 1}:`, error);
                errors.push(`Issue ${index + 1} (${request.title}): ${error.message}`);
              }
            }
            
            // Create a summary comment
            let summaryComment = '';
            
            if (createdIssues.length > 0) {
              summaryComment += `✅ **Successfully created ${createdIssues.length} issue(s):**\n\n`;
              for (const issue of createdIssues) {
                summaryComment += `- #${issue.number}: [${issue.title}](${issue.url})\n`;
              }
            }
            
            if (errors.length > 0) {
              summaryComment += `\n❌ **Errors encountered:**\n\n`;
              for (const error of errors) {
                summaryComment += `- ${error}\n`;
              }
            }
            
            if (summaryComment) {
              if (projectNumber) {
                summaryComment += `\n📋 **Project:** ${projectNumber}\n`;
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summaryComment
              });
            }
            
            // Close the auto-generated issue after processing
            if (createdIssues.length > 0) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                state: 'closed'
              });
            }